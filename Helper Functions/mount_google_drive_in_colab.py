# -*- coding: utf-8 -*-
"""Mount Google Drive in Colab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VzLjD-VgQDjVADA-Kv-XWvWK-rbezb69
"""

import json, pathlib, shutil

base = pathlib.Path("/content")

# 1) Show what's in /content so you can see the actual filename
print("üìÅ /content contains:")
for p in base.iterdir():
    print("  -", p.name)

# 2) Find a valid service-account JSON in /content (handles names like 'sa (1).json')
candidates = []
for p in base.glob("*.json"):
    try:
        j = json.loads(p.read_text())
        if j.get("type") == "service_account" and "private_key" in j and "client_email" in j:
            candidates.append(p)
    except Exception:
        pass

if not candidates:
    raise SystemExit(
        "\n‚ùå No valid service-account JSON found in /content.\n"
        "‚Ä¢ Make sure you uploaded the actual key file (not a web page).\n"
        "‚Ä¢ Re-run: from google.colab import files; files.upload()\n"
        "‚Ä¢ Or manually drag-drop the JSON into the left Files pane under /content.\n"
    )

# 3) Pick the first valid candidate and normalize the name to /content/sa.json
src = candidates[0]
dst = base / "sa.json"
if src != dst:
    shutil.copy2(src, dst)  # copy to keep original intact
print(f"\n‚úÖ Using: {src.name}  ‚Üí  {dst}")

# 4) Final assert
assert dst.exists(), "Service account JSON still missing!"
print("üëç /content/sa.json is ready.")

import os, json, pathlib, subprocess, textwrap, time, shlex

# ==== EDIT THESE ====
KEY_PATH = pathlib.Path("/content/sa.json")
FOLDER_ID = "1UaoEBl_96l50YMA-cYU6Dmuuxr5Bl0Sb"   # the folder you want to mount as root
TEAM_DRIVE_ID = ""                                # Shared Drive ID if applicable, else ""
MOUNT_DIR = pathlib.Path("/content/drive")
LOG_FILE = pathlib.Path("/content/rclone.log")

assert KEY_PATH.exists(), f"Missing key at {KEY_PATH}"

# 1) Ensure rclone exists
subprocess.run(
    ["bash","-lc","command -v rclone >/dev/null || (apt-get -y -qq install fuse rclone || (curl -s https://rclone.org/install.sh | bash))"],
    check=True
)

# 2) Write rclone.conf with root_folder_id
CONFIG_DIR = pathlib.Path("/root/.config/rclone"); CONFIG_DIR.mkdir(parents=True, exist_ok=True)
CONFIG_FILE = CONFIG_DIR / "rclone.conf"
CONFIG_FILE.write_text(textwrap.dedent(f"""
[drive]
type = drive
scope = drive
service_account_file = {KEY_PATH}
team_drive = {TEAM_DRIVE_ID}
root_folder_id = {FOLDER_ID}
""").strip())
print(f"üìù rclone.conf -> {CONFIG_FILE}")

def run(cmd, check=False):
    print("‚û§", cmd)
    return subprocess.run(["bash","-lc", cmd], text=True, capture_output=not check, check=check)

# 3) Diagnostics: version + 'about' (forces token)
print("\nüîç rclone version & about")
print(run("rclone version").stdout)
about = run("rclone about drive:")
print(about.stdout or about.stderr)

# 4) Can we list the root?
print("\nüîé Listing drive: (root_folder_id in effect)")
lsd = run("rclone lsd drive:")
if lsd.returncode != 0:
    print("‚ùå Cannot list drive root:\n", lsd.stderr)
    print("\nFixes:")
    print(" ‚Ä¢ Make sure Google Drive API is enabled for the SA's project.")
    print(" ‚Ä¢ Share the folder/Shared Drive with the SA email as Editor/Content manager.")
    print(" ‚Ä¢ If this is a Shared Drive, set TEAM_DRIVE_ID to that drive's ID.")
    raise SystemExit(1)
print("‚úÖ Access OK.\n", (lsd.stdout or "(no subfolders)")[:600])

# 5) Clean stale mount (if any)
MOUNT_DIR.mkdir(exist_ok=True)
run(f"fusermount -u {shlex.quote(str(MOUNT_DIR))} || umount {shlex.quote(str(MOUNT_DIR))} || true")

# 6) Mount drive: (no path) with debug log
if LOG_FILE.exists():
    LOG_FILE.unlink()
mount_cmd = (
    f"rclone mount drive: {shlex.quote(str(MOUNT_DIR))} "
    f"--vfs-cache-mode full "
    f"--vfs-cache-max-age 24h "
    f"--dir-cache-time 1m "
    f"--poll-interval 30s "
    f"--log-file {shlex.quote(str(LOG_FILE))} "
    f"--log-level DEBUG "
    f"--daemon"
)
rc = run(mount_cmd)
if rc.returncode != 0:
    print("‚ùå Mount command failed:\n", rc.stderr)
    print("üìÑ rclone log (tail):")
    print(run(f"tail -n 100 {shlex.quote(str(LOG_FILE))}").stdout)
    raise SystemExit(1)

time.sleep(5)

# 7) Post-mount checks
print("\nüìÅ Mounted directory listing:")
print(run(f"ls -al {shlex.quote(str(MOUNT_DIR))}").stdout)

# 8) Write test
test_file = MOUNT_DIR / "colab_test.txt"
ok = False
for i in range(1,4):
    try:
        test_file.write_text(f"Hello from Colab via SA (attempt {i})\n")
        ok = True
        break
    except OSError as e:
        print(f"Attempt {i}: write failed -> {e}")
        time.sleep(2)

if not ok:
    print("\n‚ö†Ô∏è Write still failing. Log tail for clues:")
    print(run(f"tail -n 200 {shlex.quote(str(LOG_FILE))}").stdout)
    print("\nCommon causes:")
    print(" ‚Ä¢ SA has read-only access to that folder/drive.")
    print(" ‚Ä¢ TEAM_DRIVE_ID not set for Shared Drive context.")
    print(" ‚Ä¢ Wrong FOLDER_ID (pointing to a place the SA can't write).")
    raise SystemExit(1)

print(f"\n‚úçÔ∏è Wrote {test_file}")
print("üîç Read back:\n", test_file.read_text())
print("‚úÖ Mount is writable and good to go.")

