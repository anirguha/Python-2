# -*- coding: utf-8 -*-
"""Mount Google Drive in Colab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1It4lHEeo946mXdmCR-13gPIVq7gZPSks
"""

import os, json
import base64
import pathlib
import shutil
import sys
import subprocess
import textwrap
import time

# Simulate secret retrieval
sa_json_text = r"""{
  "type": "service_account",
  "project_id": "phrasal-hold-327509",
  "private_key_id": "eac5ab43ee968142cae8393a9ec74e4858c5118f",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC0dTKmxQNnDwSi\nr6AwbUYjPAG8EBj5wgbqNKyO+DhF8J2HM2aiIONBtuSWLqoZpJIfTeui9ZVWLRJO\nbWPb/EU/DGxaNXeqSxg+ynuujm1L3oYMIHzO48vzaJFr/KBePBebjJoioms4D73L\n3e6Qjky21osOc2nqe3SMqd1LdYRb7O+dv8dgD+eS+vlIYG59EOrLxe3PMrJBE9QY\ngzNQXavYtlxrcSw1B3cBDnwjr/IdtX5uEZNcPGTUKWce2qnceojMvKX5IA23+YWC\n9uDbp02iO8Bmz61/FPodG15PVJTfeU+zYgOAdwS13os9DWJqonZCluaPP15+4QqI\nhOn6CXuHAgMBAAECggEAFeYXBHfqBsqixF9NsDLCjSoOB9VoQn7SOf+0ZREoOwyN\nAUgyj0Awc9wO906oY7494UCidL8apT+I9i1+Lcb6XEFUsMnGQMsmIRCPW8p65vcV\nC0mx+6VXLa2l4BXjHCxsrPquBb/yBPacEK5Y8f/ivVlhvJoy4zqiFSPT8AFN053D\n67RtSTpo4Ncm1UxZT2SKYv3yGaQAi5zmT89CRWyGes3cVnsUdzy1WU0Riu1qis9R\n/oZ4K/wV2+6uwYsCxotKuGFftdsduiRUxxTTqiy/ViSanLVpSHHjUgCkPsx5kpqk\n16z8gpC4jv9ZZ/FmeZlw9L/0V7MlvSU4tnyz9gc62QKBgQDgPsSQ2VTEApMpJgou\nTt0Mbj8zQ5v93yNDiRHN8AcK+XZaS6FSx731T+59i/rlPJ4iIfxRyMOL+EKveQWA\nkZwve1lyzxKK57fZpHNqnNiL1Kfuw76bm1mvTqgy83GpiCm8emY2etTjd5dynaxc\nLM+S70Te5UsMP41C7awhlBbegwKBgQDOAxH4ksePfHKCo/TkKP4m70STvQ9gJ/Pq\nLyWex5uMY6IFAqKX2PRAQEno5bPomEiuOTSNwMk6dK99qv2MYoZ/DdoKBOmBOlmX\nKIdt6IcOMPq0A0+1zRjfnsdut3D1OHd5p3ZOgEQysubetHgXLEiNsj++WSTZLLkl\n1O9M/mvfrQKBgGxyLoGWeQXp8N0/hkDq5r/yOSJDmhbmaJlqmm+rmtxV1ETKupPc\nASO3qjCRF57w99Ct+uZaXyc7wpQ1xNFumcfksVdyiRcgBKt+ekqe26KUDzrK800x\njefX9EPfs6I3NWfvEatbL8VpupY1ZnuVODVo/TeGUAr2WQx7AHmksoKdAoGBAKIh\nJm6DTYyt+wy3bg51+Ha5zTWcD9Kz/rEqA6hvHQqiiqr4xO9OLgO21LP2utztpB2B\nJcv9kiBwHoB/JmXqUEEDrLo/3Wj3e/SLT/H+kvNnNpafGIdSbyXmNrv6oGpM0zIp\nyeDD72gbBbj1PKG4Fy10v9fVHjvQh7GvX9kvTcRNAoGAf3k5H9tOkqNii2kbb1ww\nDJAWguEUhl8uauVF9x3vbTR3q8K+w2NeKhfoTPJxJGiLEuvbKr2i4t+BTGyIuE5j\n+sSJcpc86L8nil2WDAMbqgczucbN9OhPv9P5dc9Wi3iytfexq7GrRDUCr0dOD8Ae\n1p9SL08Xd2h2EHaoBDI9kk0=\n-----END PRIVATE KEY-----\n",
  "client_email": "colab-drive-access@phrasal-hold-327509.iam.gserviceaccount.com",
  "client_id": "117174193156951204686",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/colab-drive-access%40phrasal-hold-327509.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
}
"""

# 2) Set env var (no UI prompts)
os.environ["GOOGLE_SA_JSON_B64"] = base64.b64encode(sa_json_text.encode("utf-8")).decode("ascii")

# 3) Materialize /content/sa.json from the env var
b = base64.b64decode(os.environ["GOOGLE_SA_JSON_B64"])
path = pathlib.Path("/content/sa.json")
path.write_bytes(b)

# 4) Validate
json.loads(path.read_text())
print("✅ Wrote and validated /content/sa.json")

import json, pathlib
try:
    json.loads(pathlib.Path("/content/sa.json").read_text())
    print("JSON OK")
except json.JSONDecodeError as e:
    print("Line", e.lineno, "col", e.colno, "|", e.msg)
    # Show context around the error
    txt = pathlib.Path("/content/sa.json").read_text().splitlines()
    start, end = max(0, e.lineno-3), e.lineno+2
    for i in range(start, min(end, len(txt))):
        print(f"{i+1:4}: {txt[i]}")

from google.oauth2 import service_account
from googleapiclient.discovery import build

creds = service_account.Credentials.from_service_account_file(
    "/content/sa.json", scopes=["https://www.googleapis.com/auth/drive"])
drive_service = build("drive", "v3", credentials=creds)

def sh(cmd, check=True):
    """Run a shell command via bash, showing the command and raising on error."""
    print("+", cmd)
    return subprocess.run(cmd, shell=True, check=check, executable="/bin/bash")

def ensure_rclone():
    # Quiet non-interactive apt on Debian/Ubuntu/Colab
    os.environ.setdefault("DEBIAN_FRONTEND", "noninteractive")

    # Try apt first (works on Colab)
    try:
        sh("apt-get -y -qq update && apt-get -y -qq install fuse rclone || true")
    except subprocess.CalledProcessError:
        pass  # not fatal; we’ll try the installer below

    # If rclone still missing, use official install script
    if not shutil.which("rclone"):
        sh("curl -fsSL https://rclone.org/install.sh | bash")

    # Final sanity check
    if not shutil.which("rclone"):
        raise RuntimeError("rclone is not installed and the installer failed.")

    # Show version
    sh("rclone version")

if __name__ == "__main__":
    ensure_rclone()

"""# Mount the shared drive using Python"""

FOLDER_ID = "1UaoEBl_96l50YMA-cYU6Dmuuxr5Bl0Sb"   # from https://drive.google.com/drive/folders/<ID>
TEAM_DRIVE_ID = "1UaoEBl_96l50YMA-cYU6Dmuuxr5Bl0Sb"                   # if folder is on a Shared Drive, paste its drive ID; else keep ""
# ==================

import os, json, textwrap, subprocess, time, pathlib, shlex

KEY = "/content/sa.json"
assert pathlib.Path(KEY).exists(), "Missing /content/sa.json"

# 0) Validate JSON (quick sanity)
json.loads(pathlib.Path(KEY).read_text())

# 1) Ensure rclone is installed
if subprocess.call(["bash","-lc","command -v rclone >/dev/null"]) != 0:
    subprocess.run(["bash","-lc","apt-get -y -qq install fuse rclone || (curl -s https://rclone.org/install.sh | bash)"], check=True)

# 2) Write rclone config
os.makedirs("/root/.config/rclone", exist_ok=True)
conf = textwrap.dedent(f"""
[gdrive_sa]
type = drive
scope = drive
service_account_file = {KEY}
root_folder_id = {FOLDER_ID}
{"team_drive = "+TEAM_DRIVE_ID if TEAM_DRIVE_ID else ""}
""").strip()+"\n"
pathlib.Path("/root/.config/rclone/rclone.conf").write_text(conf)

print("== rclone.conf ==")
print(pathlib.Path("/root/.config/rclone/rclone.conf").read_text())

# 3) Can the remote list? (if this fails, mount will fail)
print("\n== rclone lsf test ==")
ls_ret = subprocess.run(["bash","-lc","rclone lsf gdrive_sa: --fast-list | head -n 20; echo EXIT:$?"], capture_output=True, text=True)
print(ls_ret.stdout)

# 4) Start mount in foreground and capture logs
MNT = "/content/drive_sa"
os.makedirs(MNT, exist_ok=True)
log = "/content/rclone_mount.log"

# Kill any previous rclone mount to be clean
subprocess.run(["pkill","-f","rclone mount gdrive_sa:"], check=False)
time.sleep(0.5)

print("== starting mount ==")
with open(log,"w") as lf:
    proc = subprocess.Popen([
        "rclone","mount","gdrive_sa:", MNT,
        "--vfs-cache-mode","writes",
        "--poll-interval","15s",
        "--log-file", log,
        "--log-level","INFO",
    ], stdout=lf, stderr=lf)

# Wait up to ~5s for mount to appear
ok = False
for _ in range(10):
    time.sleep(0.5)
    if os.system(f"mountpoint -q {shlex.quote(MNT)}") == 0:
        ok = True
        break

print("Mounted?", ok, " PID:", proc.pid)
if not ok:
    # Show why it failed
    print("\n== mount log tail ==")
    try:
        print(pathlib.Path(log).read_text()[-4000:])
    except Exception as e:
        print("No log:", e)

